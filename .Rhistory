result_response_rate <- rbind(r, response_rate)
print(result_response_rate)
## US Bias in Quick Question Responses
print('--------------------------')
print('US Bias in Quick Question Responses')
print('--------------------------')
ttest <- t.test(filter(visitors, country == 'US')$answer, filter(visitors, country != 'US')$answer)
pvalue <- ttest[['p.value']]
estimate <- ttest[['estimate']]
result_bias_us <- data.frame(
session = 'overall avg',
us = as.numeric(estimate[1]),
non_us = as.numeric(estimate[2]),
pvalue = round(pvalue, 8)
)
for (each in unique(summary$session_name)){
d <- filter(visitors, session_name == each)
ttest <- t.test(filter(d, country == 'US')$answer, filter(d, country != 'US')$answer)
pvalue <- ttest[['p.value']]
estimate <- ttest[['estimate']]
r <- data.frame(
session = each,
us = as.numeric(estimate[1]),
non_us = as.numeric(estimate[2]),
pvalue = round(pvalue,8)
)
result_bias_us <- rbind(result_bias_us,r)
}
r <- data.frame(session='overall median',
us=median(result_bias_us$us),
non_us=median(result_bias_us$non_us),
pvalue=-1
)
result_bias_us <- rbind(r, result_bias_us)
result_bias_us$delta <- result_bias_us$us - result_bias_us$non_us
print(result_bias_us)
## Completion Bias in Quick Question Responses
print('--------------------------')
print('Completion Bias in Quick Question Responses')
print('--------------------------')
ttest <- t.test(filter(visitors, completed == 1)$answer, filter(visitors, completed == 0)$answer)
pvalue <- ttest[['p.value']]
estimate <- ttest[['estimate']]
result_bias_completer <- data.frame(
session = 'overall avg',
completer = as.numeric(estimate[1]),
noncompleter = as.numeric(estimate[2]),
pvalue = round(pvalue, 8)
)
for (each in unique(summary$session_name)){
d <- filter(visitors, session_name == each)
tryCatch({
ttest <- t.test(filter(d, completed == 1)$answer, filter(d, completed == 0)$answer)
pvalue <- ttest[['p.value']]
estimate <- ttest[['estimate']]
r <- data.frame(
session = each,
completer = as.numeric(estimate[1]),
noncompleter = as.numeric(estimate[2]),
pvalue = round(pvalue,8)
)
result_bias_completer <- rbind(result_bias_completer,r)
},
error=function(e){print(each)}
)
}
r <- data.frame(session='overall median',
completer=median(result_bias_completer$completer),
noncompleter=median(result_bias_completer$noncompleter),
pvalue=-1
)
result_bias_completer <- rbind(r, result_bias_completer)
result_bias_completer$delta <- result_bias_completer$completer - result_bias_completer$noncompleter
print(result_bias_completer)
## Writing results as csv files
write.csv(result_experience, file='reports/result_experience.csv', row.names=FALSE)
write.csv(result_response_rate, file='reports/result_response_rate.csv', row.names=FALSE)
write.csv(result_bias_us, file='reports/result_bias_us.csv', row.names=FALSE)
write.csv(result_bias_completer, file='reports/result_bias_completer.csv', row.names=FALSE)
## Gender Bias in Quick Question Responses
print('--------------------------')
print('Gender Bias in Quick Question Responses')
print('--------------------------')
ttest <- t.test(filter(visitors, gender == 'male')$answer, filter(visitors, gender == 'female')$answer)
pvalue <- ttest[['p.value']]
estimate <- ttest[['estimate']]
result_bias_gender <- data.frame(
session = 'overall avg',
male = as.numeric(estimate[1]),
female = as.numeric(estimate[2]),
pvalue = round(pvalue, 8)
)
for (each in unique(summary$session_name)){
d <- filter(visitors, session_name == each)
tryCatch({
ttest <- t.test(filter(d, gender == 'male')$answer, filter(d, gender == 'female')$answer)
pvalue <- ttest[['p.value']]
estimate <- ttest[['estimate']]
r <- data.frame(
session = each,
male = as.numeric(estimate[1]),
female = as.numeric(estimate[2]),
pvalue = round(pvalue,8)
)
result_bias_gender <- rbind(result_bias_gender,r)
},
error=function(e){print(each)}
)
}
r <- data.frame(session='overall median',
male=median(result_bias_gender$male),
female=median(result_bias_gender$female),
pvalue=-1
)
result_bias_gender <- rbind(r, result_bias_gender)
result_bias_gender$delta <- result_bias_gender$male - result_bias_gender$female
print(result_bias_gender)
## Writing results as csv files
write.csv(result_experience, file='reports/result_experience.csv', row.names=FALSE)
write.csv(result_response_rate, file='reports/result_response_rate.csv', row.names=FALSE)
write.csv(result_bias_us, file='reports/result_bias_us.csv', row.names=FALSE)
write.csv(result_bias_completer, file='reports/result_bias_completer.csv', row.names=FALSE)
write.csv(result_bias_gender, file='reports/result_bias_gender.csv', row.names=FALSE)
library(rcoursera)
query <- "
SELECT
d.user_id
, e.country
, COALESCE(e.gender, 'UNKNOWN') AS gender
, COALESCE(e.age, -1) AS age
, d.session_id
, b.session_name
, COALESCE(f.visited_first, 0) AS visited_first
, COALESCE(c.visited, 0) AS visited
, COALESCE(a.answered, 0) AS answered
, COALESCE(a.skips, 0) AS skipped
, CASE WHEN d.achievement_level > 0 THEN 1 ELSE 0 END AS completed
FROM prod.enrollments d
LEFT JOIN
(
SELECT
session_id
, user_id
, count(distinct question_id) as answered
, SUM(case when choice_id = 5 then 1 else 0 end) AS skips
FROM prod.demographics_answers
WHERE question_id BETWEEN 57 AND 71
group by 1, 2
) a
ON (
(d.session_id = a.session_id)
AND (d.user_id = a.user_id)
)
JOIN prod.sessions b
ON d.session_id = b.session_id
LEFT JOIN
(
SELECT a.page_view_session_id AS session_id
, a.user_id
, 1 AS visited
, MAX(a.page_view_dt) AS date
FROM prod.page_views a
WHERE a.page_view_dt>= '2014-10-09'
AND a.page_view_session_id IS NOT NULL
GROUP BY 1, 2
)c
ON (
(d.session_id = c.session_id)
AND (d.user_id = c.user_id)
AND (c.date >= dateadd(day, 21, b.session_start_dt))
)
LEFT JOIN
(
SELECT
a.user_id
, c.country_cd as country
, MAX(CASE WHEN a.question_id = 11 THEN b.choice_desc ELSE null END) as gender
, MAX(CASE WHEN a.question_id = 12 THEN 2015 - a.answer_int ELSE null END) as age
FROM prod.demographics_answers as a
JOIN prod.demographics_choices as b
ON (
(a.question_id = b.question_id)
AND (a.choice_id = b.choice_id)
)
JOIN prod.users c
ON a.user_id = c.user_id
GROUP BY 1, 2
) e
ON (d.user_id = e.user_id)
LEFT JOIN
(
SELECT a.page_view_session_id AS session_id
, a.user_id
, 1 AS visited_first
, MAX(a.page_view_dt) AS date
FROM prod.page_views a
WHERE a.page_view_dt>= '2014-10-09'
AND a.page_view_session_id IS NOT NULL
GROUP BY 1, 2
) f
ON (
(d.session_id = f.session_id)
AND (d.user_id = f.user_id)
AND (f.date >= b.session_start_dt)
)
WHERE
b.session_start_dt >= '2014-10-09'
AND d.access_group_id = 4
AND b.session_grade_release_dt <= GETDATE()
"
raw <- edw.read.sql(query)
## Pull data on user buckets - whether user is set to see the questions
query <- "
select user,
max(
case when value like '%,no_qqs,baseline%' then 0
else 1 end
) as qq_bucket
from  mydataset.livedata_v2_14_41
, mydataset.livedata_v2_14_42
, mydataset.livedata_v2_14_43
, mydataset.livedata_v2_14_44
, mydataset.livedata_v2_14_45
, mydataset.livedata_v2_14_46
, mydataset.livedata_v2_14_47
, mydataset.livedata_v2_14_48
, mydataset.livedata_v2_14_49
, mydataset.livedata_v2_14_50
, mydataset.livedata_v2_14_51
, mydataset.livedata_v2_14_52
, mydataset.livedata_v2_15_01
, mydataset.livedata_v2_15_02
, mydataset.livedata_v2_15_03
, mydataset.livedata_v2_15_04
, mydataset.livedata_v2_15_05
where value like 'user,in_class_qqs,%'
AND DATE(MSEC_TO_TIMESTAMP(time)) >= '2014-10-09'
group by 1
"
qq_bucket <- bigquery.read.sql(query)
query <- "
SELECT
d.user_id
, e.country
, COALESCE(e.gender, 'UNKNOWN') AS gender
, COALESCE(e.age, -1) AS age
, d.session_id
, b.session_name
, COALESCE(f.visited_first, 0) AS visited_first
, COALESCE(c.visited, 0) AS visited
, COALESCE(a.answered, 0) AS answered
, COALESCE(a.skips, 0) AS skipped
, CASE WHEN d.achievement_level > 0 THEN 1 ELSE 0 END AS completed
FROM prod.enrollments d
LEFT JOIN
(
SELECT
session_id
, user_id
, count(distinct question_id) as answered
, SUM(case when choice_id = 5 then 1 else 0 end) AS skips
FROM prod.demographics_answers
WHERE question_id BETWEEN 57 AND 71
group by 1, 2
) a
ON (
(d.session_id = a.session_id)
AND (d.user_id = a.user_id)
)
JOIN prod.sessions b
ON d.session_id = b.session_id
LEFT JOIN
(
SELECT a.page_view_session_id AS session_id
, a.user_id
, 1 AS visited
, MAX(a.page_view_dt) AS date
FROM prod.page_views a
WHERE a.page_view_dt>= '2014-10-09'
AND a.page_view_session_id IS NOT NULL
GROUP BY 1, 2
)c
ON (
(d.session_id = c.session_id)
AND (d.user_id = c.user_id)
AND (c.date >= dateadd(day, 21, b.session_start_dt))
)
LEFT JOIN
(
SELECT
a.user_id
, c.country_cd as country
, MAX(CASE WHEN a.question_id = 11 THEN b.choice_desc ELSE null END) as gender
, MAX(CASE WHEN a.question_id = 12 THEN 2015 - a.answer_int ELSE null END) as age
FROM prod.demographics_answers as a
JOIN prod.demographics_choices as b
ON (
(a.question_id = b.question_id)
AND (a.choice_id = b.choice_id)
)
JOIN prod.users c
ON a.user_id = c.user_id
GROUP BY 1, 2
) e
ON (d.user_id = e.user_id)
LEFT JOIN
(
SELECT a.page_view_session_id AS session_id
, a.user_id
, 1 AS visited_first
, MAX(a.page_view_dt) AS date
FROM prod.page_views a
WHERE a.page_view_dt>= '2014-10-09'
AND a.page_view_session_id IS NOT NULL
GROUP BY 1, 2
) f
ON (
(d.session_id = f.session_id)
AND (d.user_id = f.user_id)
AND (f.date >= b.session_start_dt)
)
WHERE
b.session_start_dt >= '2014-10-09'
AND d.access_group_id = 4
AND b.session_grade_release_dt <= GETDATE()
"
raw <- edw.read.sql(query)
library(rcorusera)
library(rcoursera)
query <- "
SELECT
d.user_id
, e.country
, COALESCE(e.gender, 'UNKNOWN') AS gender
, COALESCE(e.age, -1) AS age
, d.session_id
, b.session_name
, COALESCE(f.visited_first, 0) AS visited_first
, COALESCE(c.visited, 0) AS visited
, COALESCE(a.answered, 0) AS answered
, COALESCE(a.skips, 0) AS skipped
, CASE WHEN d.achievement_level > 0 THEN 1 ELSE 0 END AS completed
FROM prod.enrollments d
LEFT JOIN
(
SELECT
session_id
, user_id
, count(distinct question_id) as answered
, SUM(case when choice_id = 5 then 1 else 0 end) AS skips
FROM prod.demographics_answers
WHERE question_id BETWEEN 57 AND 71
group by 1, 2
) a
ON (
(d.session_id = a.session_id)
AND (d.user_id = a.user_id)
)
JOIN prod.sessions b
ON d.session_id = b.session_id
LEFT JOIN
(
SELECT a.page_view_session_id AS session_id
, a.user_id
, 1 AS visited
, MAX(a.page_view_dt) AS date
FROM prod.page_views a
WHERE a.page_view_dt>= '2014-10-09'
AND a.page_view_session_id IS NOT NULL
GROUP BY 1, 2
)c
ON (
(d.session_id = c.session_id)
AND (d.user_id = c.user_id)
AND (c.date >= dateadd(day, 21, b.session_start_dt))
)
LEFT JOIN
(
SELECT
a.user_id
, c.country_cd as country
, MAX(CASE WHEN a.question_id = 11 THEN b.choice_desc ELSE null END) as gender
, MAX(CASE WHEN a.question_id = 12 THEN 2015 - a.answer_int ELSE null END) as age
FROM prod.demographics_answers as a
JOIN prod.demographics_choices as b
ON (
(a.question_id = b.question_id)
AND (a.choice_id = b.choice_id)
)
JOIN prod.users c
ON a.user_id = c.user_id
GROUP BY 1, 2
) e
ON (d.user_id = e.user_id)
LEFT JOIN
(
SELECT a.page_view_session_id AS session_id
, a.user_id
, 1 AS visited_first
, MAX(a.page_view_dt) AS date
FROM prod.page_views a
WHERE a.page_view_dt>= '2014-10-09'
AND a.page_view_session_id IS NOT NULL
GROUP BY 1, 2
) f
ON (
(d.session_id = f.session_id)
AND (d.user_id = f.user_id)
AND (f.date >= b.session_start_dt)
)
WHERE
b.session_start_dt >= '2014-10-09'
AND d.access_group_id = 4
AND b.session_grade_release_dt <= GETDATE()
"
raw <- edw.read.sql(query)
query
edw.read.sql(query)
setwd('~/playground/datascience/reproduce//RepData_PeerAssessment1')
read.csv(unz("activity.zip"))
read.csv(filename=unz("activity.zip"))
read.table(unz("activity.zip"))
read.csv(unz("activity.zip", "activity.csv"))
a <- read.csv(unz("activity.zip", "activity.csv"))
View(a)
a$steps <- as.integer(a$steps)
View(a)
a$steps + 1
class(a$steps)
a <- read.csv(unz("activity.zip", "activity.csv"))
class(a$steps)
mean(a$steps)
mean(a$steps, na.rm = TRUE)
hist(a$steps, na.omit)
hist(a$steps)
median(a$steps)
median(a$steps, na.rm = TRUE)
View(a)
library(dplyr)
library(xtable)
xtable(a)
steps_by_interval <- summarise(
group_by(a, interval),
steps = mean(steps, na.rm=TRUE)
)
View(steps_by_interval)
max(steps_by_interval$steps)
filter(steps_by_interval, steps = max(steps_by_interval$steps))
filter(steps_by_interval, steps == max(steps_by_interval$steps))
filter(steps_by_interval, steps == max(steps_by_interval$steps))$interval
filter(steps_by_interval, steps == max(steps_by_interval$steps))$interval[1]
data <- a
filter(data, is.na(steps))
dim(filter(data, is.na(steps)))
dim(filter(data, is.na(steps)))[1]
merge(data, steps_by_interval, by = c('interval'))
b <- merge(data, steps_by_interval, by = c('interval'))
View(b)
b[100,]
b[order(-b$interval),]
b[order(b$date),]
data_fillna <- merge(data, steps_by_interval, by = c('interval'))
data_fillna$steps.x[is.na(data_fillna$steps.x)] <- data_fillna$steps.y[is.na(data_fillna$steps.x)]
View(data_fillna)
View(data)
b
total_daily_fillna <- summarise(group_by(data_fillna, date),
steps = sum(steps)
)
data_fillna <- merge(data, steps_by_interval, by = c('interval'))
data_fillna$steps <- data_fillna$steps.x
data_fillna$steps.x[is.na(data_fillna$steps.x)] <- data_fillna$steps.y[is.na(data_fillna$steps.x)]
data_fillna <- data_fillna[, c('steps', 'date', 'interval')]
total_daily_fillna <- summarise(group_by(data_fillna, date),
steps = sum(steps)
)
mean(total_daily_fillna$steps)
View(total_daily_fillna)
data_fillna <- merge(data, steps_by_interval, by = c('interval'))
data_fillna$steps <- data_fillna$steps.x
data_fillna$steps.x[is.na(data_fillna$steps.x)] <- data_fillna$steps.y[is.na(data_fillna$steps.x)]
data_fillna <- data_fillna[, c('steps', 'date', 'interval')]
View(data_fillna)
data_fillna <- merge(data, steps_by_interval, by = c('interval'))
data_fillna$steps <- data_fillna$steps.x
data_fillna$steps[is.na(data_fillna$steps.x)] <- data_fillna$steps.y[is.na(data_fillna$steps.x)]
data_fillna <- data_fillna[, c('steps', 'date', 'interval')]
total_daily_fillna <- summarise(group_by(data_fillna, date),
steps = sum(steps)
)
mean(total_daily_fillna$steps)
median(total_daily_fillna$steps)
View(data_fillna)
a
weekdays(a$date)
weekdays(as.Date(a$date))
weekdays(as.Date(a$date)) in c('Saturday', 'Sunday')
data_fillna$weekday <- 'weekday'
data_fillna$weekday[weekdays(as.Date(a$date)) == 'Saturday'] <- 'weekend'
data_fillna$weekday[weekdays(as.Date(a$date)) == 'Sunday'] <- 'weekend'
View(data_fillna)
data_fillna[data_fillna$weekday == 'weekend',]
data_by_weekday <- summarise(
group_by(data_fillna, weekday, interval),
steps = mean(steps)
)
library(ggplot2)
qplot(interval, steps, data=data_by_weekday, facets = weekday, geom=c('line'))
View(data_by_weekday)
qplot(interval, steps, facets = weekday, data=data_by_weekday, geom=c('line'))
qplot(interval, steps, facets = 'weekday', data=data_by_weekday, geom=c('line'))
qplot(interval, steps, facets = .~weekday, data=data_by_weekday, geom=c('line'))
